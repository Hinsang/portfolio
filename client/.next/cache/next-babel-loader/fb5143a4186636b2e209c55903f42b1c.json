{"ast":null,"code":"import axios from 'axios';\nimport { delay, put, takeLatest, all, fork, call } from 'redux-saga/effects';\nimport { useSelector } from 'react-redux';\nimport { LOG_IN_FAILURE, LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user'; // <- 이 부분에 리듀서에서 가져올 요청을 임포트한다.\n// import { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from '../reducers/post';\n// function signUpAPI() {\n// return axios.get('http://localhost:3065/user')\n// }\n\nfunction logInAPI(data) {\n  return axios.patch('http://localhost:3065/Login', data);\n  const {\n    me\n  } = useSelector(state => state.user);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data); // console.log(result);\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n    console.log(me);\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.get('http://localhost:3065/Logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('http://localhost:3065/Signup', data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 아래는 백엔드에서 가져올 API를 넣어준다.\n// function addPostAPI(data) {\n//   return axios.post('/api/post', data);\n// }\n// 아래 함수는 요청이 일어나면 실행될 함수를 넣어준다.\n// function* addPost(action) {\n//   try {\n//     // const result = yield call(addPostAPI, action.data)\n//     yield delay(1000);\n//     const id = shortId.generate();\n//     yield put({\n//       type: ADD_POST_SUCCESS, // post 리듀서 바꾸기\n//       data: {\n//         id,\n//         content: action.data,\n//       },\n//     });\n//     yield put({\n//       type: ADD_POST_TO_ME, // user 리듀서 바꾸기\n//       data: id,\n//     });\n//   } catch (err) {\n//     yield put({\n//       type: ADD_POST_FAILURE, // post 리듀서 바꾸기\n//       data: err.response.data,\n//     });\n//   }\n// }\n// 이 아래는 yield all 배열 안에 있는 fork 요청들을 한번씩 실행한다.\n// 요청 실행중 가장최근에 실행된 ADD_POST_REQUEST 요청이 되면, 위에 만든 addpost 함수를 실행한다\n// function* watchAddPost() {\n//   yield takeLatest(ADD_POST_REQUEST, addPost);\n// }\n\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/win7/Desktop/project/client/sagas/user.js"],"names":["axios","delay","put","takeLatest","all","fork","call","useSelector","LOG_IN_FAILURE","LOG_IN_SUCCESS","LOG_IN_REQUEST","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logInAPI","data","patch","me","state","user","logIn","action","result","type","console","log","err","error","response","logOutAPI","get","logOut","signUpAPI","post","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { delay, put, takeLatest, all, fork, call } from 'redux-saga/effects';\r\nimport { useSelector } from 'react-redux';\r\nimport { LOG_IN_FAILURE, LOG_IN_SUCCESS, LOG_IN_REQUEST,\r\n  LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\r\n\r\n// <- 이 부분에 리듀서에서 가져올 요청을 임포트한다.\r\n// import { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from '../reducers/post';\r\n\r\n// function signUpAPI() {\r\n// return axios.get('http://localhost:3065/user')\r\n// }\r\n\r\nfunction logInAPI(data) {\r\n  return axios.patch('http://localhost:3065/Login', data);\r\n  const { me } = useSelector((state) => state.user);\r\n}\r\nfunction* logIn(action) {\r\n  try {\r\n    const result = yield call(logInAPI, action.data);\r\n    // console.log(result);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    console.log(me);\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.get('http://localhost:3065/Logout');\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n  return axios.post('http://localhost:3065/Signup', data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpAPI, action.data);\r\n    console.log(result);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// 아래는 백엔드에서 가져올 API를 넣어준다.\r\n// function addPostAPI(data) {\r\n//   return axios.post('/api/post', data);\r\n// }\r\n\r\n// 아래 함수는 요청이 일어나면 실행될 함수를 넣어준다.\r\n// function* addPost(action) {\r\n//   try {\r\n//     // const result = yield call(addPostAPI, action.data)\r\n//     yield delay(1000);\r\n//     const id = shortId.generate();\r\n//     yield put({\r\n//       type: ADD_POST_SUCCESS, // post 리듀서 바꾸기\r\n//       data: {\r\n//         id,\r\n//         content: action.data,\r\n//       },\r\n//     });\r\n//     yield put({\r\n//       type: ADD_POST_TO_ME, // user 리듀서 바꾸기\r\n//       data: id,\r\n//     });\r\n//   } catch (err) {\r\n//     yield put({\r\n//       type: ADD_POST_FAILURE, // post 리듀서 바꾸기\r\n//       data: err.response.data,\r\n//     });\r\n//   }\r\n// }\r\n\r\n// 이 아래는 yield all 배열 안에 있는 fork 요청들을 한번씩 실행한다.\r\n// 요청 실행중 가장최근에 실행된 ADD_POST_REQUEST 요청이 되면, 위에 만든 addpost 함수를 실행한다\r\n// function* watchAddPost() {\r\n//   yield takeLatest(ADD_POST_REQUEST, addPost);\r\n// }\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}