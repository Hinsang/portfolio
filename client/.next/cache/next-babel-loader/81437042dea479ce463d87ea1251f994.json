{"ast":null,"code":"// 더미데이터 넣을 때 아래 3개 주석 풀기\n// import shortId from 'shortid';\nimport produce from 'immer'; // import faker from 'faker';\n\nexport const initialState = {\n  // 여기에 필요한 스테이트 넣기\n  logInLoading: false,\n  logInDone: false,\n  logInError: null,\n  logOutLoading: false,\n  logOutDone: false,\n  logOutError: null,\n  signUpLoading: false,\n  signUpDone: false,\n  signUpError: null,\n  me: null\n}; // 더미데이터를 무작위로 넣는다면 어래와같이 넣어준다.\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: shortId.generate(),\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n// 이 아래 3개는 사가로 익스포트하는 예제. 각각 요청, 성공, 실패의 3가지 변수를 만든다.\n\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE'; // export const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\n// export const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\n// export const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n// 이 아래 예제는 사가에서 실행할 함수이다. 타입과 데이터를 합쳐서 사가에 넘겨준다.\n// export const addPost = (data) => ({\n//   type: ADD_POST_REQUEST,\n//   data,\n// });\n\nexport const loginRequestAction = data => ({\n  type: LOG_IN_REQUEST,\n  data\n}); // export const logoutAction = () => ({\n//   type: 'LOG_OUT_REQUEST',\n// });\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    // <- 이 부분에 아래와 같이 draft로 불변성 지키면서 각각의 상태를 고쳐줌\n    // case LOAD_POSTS_REQUEST:\n    //   draft.loadPostsLoading = true;\n    //   draft.loadPostsDone = false;\n    //   draft.loadPostsError = null;\n    //   break;\n    case LOG_IN_REQUEST:\n      draft.logInDone = false;\n      draft.logInError = null;\n      draft.logInLoading = true;\n      break;\n\n    case LOG_IN_SUCCESS:\n      draft.logInDone = true;\n      draft.logInError = null;\n      draft.logInLoading = false;\n      draft.me = action.data;\n      break;\n\n    case LOG_IN_FAILURE:\n      draft.logInDone = false;\n      draft.logInError = action.error;\n      draft.logInLoading = false;\n      break;\n\n    case LOG_OUT_REQUEST:\n      draft.logOutDone = false;\n      draft.logOutError = null;\n      draft.logOutLoading = true;\n      break;\n\n    case LOG_OUT_SUCCESS:\n      draft.logInDone = false;\n      draft.logOutDone = true;\n      draft.logOutError = null;\n      draft.logOutLoading = false;\n      draft.me = null;\n      break;\n\n    case LOG_OUT_FAILURE:\n      draft.logOutDone = false;\n      draft.logOutError = action.err;\n      draft.logOutLoading = false;\n      break;\n\n    case SIGN_UP_REQUEST:\n      draft.signUpDone = false;\n      draft.signUpError = null;\n      draft.signUpLoading = true;\n      break;\n\n    case SIGN_UP_SUCCESS:\n      draft.signUpDone = true;\n      draft.signUpError = null;\n      draft.signUpLoading = false;\n      break;\n\n    case SIGN_UP_FAILURE:\n      draft.signUpDone = false;\n      draft.signUpError = action.err;\n      draft.signUpLoading = false;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/win7/Desktop/project/client/reducers/user.js"],"names":["produce","initialState","logInLoading","logInDone","logInError","logOutLoading","logOutDone","logOutError","signUpLoading","signUpDone","signUpError","me","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","loginRequestAction","data","type","reducer","state","action","draft","error","err"],"mappings":"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","sourcesContent":["// 더미데이터 넣을 때 아래 3개 주석 풀기\r\n// import shortId from 'shortid';\r\nimport produce from 'immer';\r\n// import faker from 'faker';\r\n\r\nexport const initialState = {\r\n  // 여기에 필요한 스테이트 넣기\r\n  logInLoading: false,\r\n  logInDone: false,\r\n  logInError: null,\r\n  logOutLoading: false,\r\n  logOutDone: false,\r\n  logOutError: null,\r\n  signUpLoading: false,\r\n  signUpDone: false,\r\n  signUpError: null,\r\n  me: null,\r\n};\r\n\r\n// 더미데이터를 무작위로 넣는다면 어래와같이 넣어준다.\r\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n//   id: shortId.generate(),\r\n//   User: {\r\n\r\n//     id: shortId.generate(),\r\n//     nickname: faker.name.findName(),\r\n//   },\r\n//   content: faker.lorem.paragraph(),\r\n//   Images: [{\r\n//     src: faker.image.image(),\r\n//   }],\r\n//   Comments: [{\r\n//     User: {\r\n//       id: shortId.generate(),\r\n//       nickname: faker.name.findName(),\r\n//     },\r\n//     content: faker.lorem.sentence(),\r\n//   }],\r\n// }));\r\n\r\n// 이 아래 3개는 사가로 익스포트하는 예제. 각각 요청, 성공, 실패의 3가지 변수를 만든다.\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\r\n// export const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\n// export const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\n// export const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\n// 이 아래 예제는 사가에서 실행할 함수이다. 타입과 데이터를 합쳐서 사가에 넘겨준다.\r\n// export const addPost = (data) => ({\r\n//   type: ADD_POST_REQUEST,\r\n//   data,\r\n// });\r\nexport const loginRequestAction = (data) => ({\r\n  type: LOG_IN_REQUEST,\r\n  data,\r\n});\r\n\r\n// export const logoutAction = () => ({\r\n//   type: 'LOG_OUT_REQUEST',\r\n// });\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    // <- 이 부분에 아래와 같이 draft로 불변성 지키면서 각각의 상태를 고쳐줌\r\n    // case LOAD_POSTS_REQUEST:\r\n    //   draft.loadPostsLoading = true;\r\n    //   draft.loadPostsDone = false;\r\n    //   draft.loadPostsError = null;\r\n    //   break;\r\n    case LOG_IN_REQUEST:\r\n      draft.logInDone = false;\r\n      draft.logInError = null;\r\n      draft.logInLoading = true;\r\n      break;\r\n    case LOG_IN_SUCCESS:\r\n      draft.logInDone = true;\r\n      draft.logInError = null;\r\n      draft.logInLoading = false;\r\n      draft.me = action.data;\r\n      break;\r\n    case LOG_IN_FAILURE:\r\n      draft.logInDone = false;\r\n      draft.logInError = action.error;\r\n      draft.logInLoading = false;\r\n      break;\r\n    case LOG_OUT_REQUEST:\r\n      draft.logOutDone = false;\r\n      draft.logOutError = null;\r\n      draft.logOutLoading = true;\r\n      break;\r\n    case LOG_OUT_SUCCESS:\r\n      draft.logInDone = false;\r\n      draft.logOutDone = true;\r\n      draft.logOutError = null;\r\n      draft.logOutLoading = false;\r\n      draft.me = null;\r\n      break;\r\n    case LOG_OUT_FAILURE:\r\n      draft.logOutDone = false;\r\n      draft.logOutError = action.err;\r\n      draft.logOutLoading = false;\r\n      break;\r\n    case SIGN_UP_REQUEST:\r\n      draft.signUpDone = false;\r\n      draft.signUpError = null;\r\n      draft.signUpLoading = true;\r\n      break;\r\n    case SIGN_UP_SUCCESS:\r\n      draft.signUpDone = true;\r\n      draft.signUpError = null;\r\n      draft.signUpLoading = false;\r\n      break;\r\n    case SIGN_UP_FAILURE:\r\n      draft.signUpDone = false;\r\n      draft.signUpError = action.err;\r\n      draft.signUpLoading = false;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}