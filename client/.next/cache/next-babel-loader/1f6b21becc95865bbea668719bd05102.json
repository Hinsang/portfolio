{"ast":null,"code":"import axios from 'axios';\nimport { delay, put, takeLatest, all, fork, call, throttle } from 'redux-saga/effects';\nimport { useSelector } from 'react-redux';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('http://localhost:3065/Board/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log(result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/Board', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts); // 5초에 한번씩만 요청 받게 설정\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["C:/Users/win7/Desktop/project/client/sagas/post.js"],"names":["axios","delay","put","takeLatest","all","fork","call","throttle","useSelector","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","ADD_POST_TO_ME","addPostAPI","data","post","addPost","action","result","console","log","type","id","err","error","response","loadPostsAPI","get","loadPosts","watchAddPost","watchLoadPosts","postSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,UAArB,EAAiCC,GAAjC,EAAsCC,IAAtC,EAA4CC,IAA5C,EAAkDC,QAAlD,QAAkE,oBAAlE;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EAA+DC,kBAA/D,EAAmFC,kBAAnF,EAAuGC,kBAAvG,QAAiI,kBAAjI;AACA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOjB,KAAK,CAACkB,IAAN,CAAW,kCAAX,EAA+CD,IAA/C,CAAP;AACD;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMf,IAAI,CAACU,UAAD,EAAaI,MAAM,CAACH,IAApB,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,UAAMnB,GAAG,CAAC;AACRsB,MAAAA,IAAI,EAAEb,gBADE;AAERM,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAIA,UAAMf,GAAG,CAAC;AACRsB,MAAAA,IAAI,EAAET,cADE;AAERE,MAAAA,IAAI,EAAEI,MAAM,CAACJ,IAAP,CAAYQ;AAFV,KAAD,CAAT;AAID,GAXD,CAWE,OAAOC,GAAP,EAAY;AACZJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACA,UAAMxB,GAAG,CAAC;AACRsB,MAAAA,IAAI,EAAEf,gBADE;AAERkB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaX;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASY,YAAT,CAAsBZ,IAAtB,EAA4B;AAC1B,SAAOjB,KAAK,CAAC8B,GAAN,CAAU,QAAV,EAAoBb,IAApB,CAAP;AACD;;AAED,UAAUc,SAAV,CAAoBX,MAApB,EAA4B;AAC1B,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMf,IAAI,CAACuB,YAAD,EAAeT,MAAM,CAACH,IAAtB,CAAzB;AACA,UAAMf,GAAG,CAAC;AACRsB,MAAAA,IAAI,EAAEV,kBADE;AAERG,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOS,GAAP,EAAY;AACZJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACA,UAAMxB,GAAG,CAAC;AACRsB,MAAAA,IAAI,EAAEZ,kBADE;AAERe,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaX;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUe,YAAV,GAAyB;AACvB,QAAM7B,UAAU,CAACO,gBAAD,EAAmBS,OAAnB,CAAhB;AACD;;AAED,UAAUc,cAAV,GAA2B;AACzB,QAAM1B,QAAQ,CAAC,IAAD,EAAOM,kBAAP,EAA2BkB,SAA3B,CAAd,CADyB,CAEzB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAM9B,GAAG,CAAC,CACRC,IAAI,CAAC2B,YAAD,CADI,EAER3B,IAAI,CAAC4B,cAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import axios from 'axios';\r\nimport { delay, put, takeLatest, all, fork, call, throttle } from 'redux-saga/effects';\r\nimport { useSelector } from 'react-redux';\r\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS } from '../reducers/post';\r\nimport { ADD_POST_TO_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('http://localhost:3065/Board/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    console.log(result);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get('/Board', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n  // 5초에 한번씩만 요청 받게 설정\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}