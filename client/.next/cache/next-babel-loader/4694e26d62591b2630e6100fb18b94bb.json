{"ast":null,"code":"// 더미데이터 넣을 때 아래 3개 주석 풀기\n// import shortId from 'shortid';\nimport produce from 'immer'; // import faker from 'faker';\n\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nexport const initialState = {\n  // 여기에 필요한 스테이트 넣기\n  loadUserLoading: false,\n  loadUserDone: false,\n  loadUserError: null,\n  logInLoading: false,\n  logInDone: false,\n  logInError: null,\n  logOutLoading: false,\n  logOutDone: false,\n  logOutError: null,\n  signUpLoading: false,\n  signUpDone: false,\n  signUpError: null,\n  me: null\n}; // 더미데이터를 무작위로 넣는다면 어래와같이 넣어준다.\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: shortId.generate(),\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n// 이 아래 3개는 사가로 익스포트하는 예제. 각각 요청, 성공, 실패의 3가지 변수를 만든다.\n\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport const SIGN_UP_RESET = 'SIGN_UP_RESET';\nexport const LOAD_MY_INFO_REQUEST = 'LOAD_MY_INFO_REQUEST';\nexport const LOAD_MY_INFO_SUCCESS = 'LOAD_MY_INFO_SUCCESS';\nexport const LOAD_MY_INFO_FAILURE = 'LOAD_MY_INFO_FAILURE'; // export const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\n// export const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\n// export const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n// 이 아래 예제는 사가에서 실행할 함수이다. 타입과 데이터를 합쳐서 사가에 넘겨준다.\n// export const addPost = (data) => ({\n//   type: ADD_POST_REQUEST,\n//   data,\n// });\n// export const logoutAction = () => ({\n//   type: 'LOG_OUT_REQUEST',\n// });\n// useEffect(() => {\n//   const { me } = state.me;\n//   if (me) axios.defaults.headers.common.sessionid = me.sessionId;\n// }, [me]);\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  // const { me } = useSelector((state) => state.user);\n  switch (action.type) {\n    // <- 이 부분에 아래와 같이 draft로 불변성 지키면서 각각의 상태를 고쳐줌\n    // case LOAD_POSTS_REQUEST:\n    //   draft.loadPostsLoading = true;\n    //   draft.loadPostsDone = false;\n    //   draft.loadPostsError = null;\n    //   break;\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/win7/Desktop/project/client/reducers/post.js"],"names":["produce","useEffect","axios","useSelector","initialState","loadUserLoading","loadUserDone","loadUserError","logInLoading","logInDone","logInError","logOutLoading","logOutDone","logOutError","signUpLoading","signUpDone","signUpError","me","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_RESET","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","reducer","state","action","draft","type"],"mappings":"AAAA;AACA;AACA,OAAOA,OAAP,MAAoB,OAApB,C,CACA;;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1B;AACAC,EAAAA,eAAe,EAAE,KAFS;AAG1BC,EAAAA,YAAY,EAAE,KAHY;AAI1BC,EAAAA,aAAa,EAAE,IAJW;AAK1BC,EAAAA,YAAY,EAAE,KALY;AAM1BC,EAAAA,SAAS,EAAE,KANe;AAO1BC,EAAAA,UAAU,EAAE,IAPc;AAQ1BC,EAAAA,aAAa,EAAE,KARW;AAS1BC,EAAAA,UAAU,EAAE,KATc;AAU1BC,EAAAA,WAAW,EAAE,IAVa;AAW1BC,EAAAA,aAAa,EAAE,KAXW;AAY1BC,EAAAA,UAAU,EAAE,KAZc;AAa1BC,EAAAA,WAAW,EAAE,IAba;AAc1BC,EAAAA,EAAE,EAAE;AAdsB,CAArB,C,CAiBP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B,C,CAEP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAG5B,YAAT,EAAuB6B,MAAvB,KAAkCjC,OAAO,CAACgC,KAAD,EAASE,KAAD,IAAW;AAC1E;AACA,UAAQD,MAAM,CAACE,IAAf;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AARJ;AAUD,CAZwD,CAAzD;;AAcA,eAAeJ,OAAf","sourcesContent":["// 더미데이터 넣을 때 아래 3개 주석 풀기\r\n// import shortId from 'shortid';\r\nimport produce from 'immer';\r\n// import faker from 'faker';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const initialState = {\r\n  // 여기에 필요한 스테이트 넣기\r\n  loadUserLoading: false,\r\n  loadUserDone: false,\r\n  loadUserError: null,\r\n  logInLoading: false,\r\n  logInDone: false,\r\n  logInError: null,\r\n  logOutLoading: false,\r\n  logOutDone: false,\r\n  logOutError: null,\r\n  signUpLoading: false,\r\n  signUpDone: false,\r\n  signUpError: null,\r\n  me: null,\r\n};\r\n\r\n// 더미데이터를 무작위로 넣는다면 어래와같이 넣어준다.\r\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n//   id: shortId.generate(),\r\n//   User: {\r\n\r\n//     id: shortId.generate(),\r\n//     nickname: faker.name.findName(),\r\n//   },\r\n//   content: faker.lorem.paragraph(),\r\n//   Images: [{\r\n//     src: faker.image.image(),\r\n//   }],\r\n//   Comments: [{\r\n//     User: {\r\n//       id: shortId.generate(),\r\n//       nickname: faker.name.findName(),\r\n//     },\r\n//     content: faker.lorem.sentence(),\r\n//   }],\r\n// }));\r\n\r\n// 이 아래 3개는 사가로 익스포트하는 예제. 각각 요청, 성공, 실패의 3가지 변수를 만든다.\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\r\nexport const SIGN_UP_RESET = 'SIGN_UP_RESET';\r\nexport const LOAD_MY_INFO_REQUEST = 'LOAD_MY_INFO_REQUEST';\r\nexport const LOAD_MY_INFO_SUCCESS = 'LOAD_MY_INFO_SUCCESS';\r\nexport const LOAD_MY_INFO_FAILURE = 'LOAD_MY_INFO_FAILURE';\r\n\r\n// export const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\n// export const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\n// export const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\n// 이 아래 예제는 사가에서 실행할 함수이다. 타입과 데이터를 합쳐서 사가에 넘겨준다.\r\n// export const addPost = (data) => ({\r\n//   type: ADD_POST_REQUEST,\r\n//   data,\r\n// });\r\n\r\n// export const logoutAction = () => ({\r\n//   type: 'LOG_OUT_REQUEST',\r\n// });\r\n// useEffect(() => {\r\n//   const { me } = state.me;\r\n//   if (me) axios.defaults.headers.common.sessionid = me.sessionId;\r\n// }, [me]);\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  // const { me } = useSelector((state) => state.user);\r\n  switch (action.type) {\r\n    // <- 이 부분에 아래와 같이 draft로 불변성 지키면서 각각의 상태를 고쳐줌\r\n    // case LOAD_POSTS_REQUEST:\r\n    //   draft.loadPostsLoading = true;\r\n    //   draft.loadPostsDone = false;\r\n    //   draft.loadPostsError = null;\r\n    //   break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}