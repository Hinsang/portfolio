{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport axios from 'axios';\nimport { delay, put, takeLatest, all, fork, call } from 'redux-saga/effects';\nimport { useSelector } from 'react-redux';\nimport { LOG_IN_FAILURE, LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user'; // <- 이 부분에 리듀서에서 가져올 요청을 임포트한다.\n// import { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from '../reducers/post';\n// function signUpAPI() {\n// return axios.get('http://localhost:3065/user')\n// }\n\nvar _useSelector = useSelector(function (state) {\n  return state.user;\n}),\n    me = _useSelector.me;\n\nfunction logInAPI(data) {\n  return axios.patch('http://localhost:3065/Login', data);\n}\n\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(logInAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          console.log(me);\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 14;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction logOutAPI() {\n  return axios.get('http://localhost:3065/Logout');\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction signUpAPI(data) {\n  return axios.post('http://localhost:3065/Signup', data);\n}\n\nfunction signUp(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          console.log(result);\n          _context3.next = 7;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 7:\n          _context3.next = 13;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 13;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n} // 아래는 백엔드에서 가져올 API를 넣어준다.\n// function addPostAPI(data) {\n//   return axios.post('/api/post', data);\n// }\n// 아래 함수는 요청이 일어나면 실행될 함수를 넣어준다.\n// function* addPost(action) {\n//   try {\n//     // const result = yield call(addPostAPI, action.data)\n//     yield delay(1000);\n//     const id = shortId.generate();\n//     yield put({\n//       type: ADD_POST_SUCCESS, // post 리듀서 바꾸기\n//       data: {\n//         id,\n//         content: action.data,\n//       },\n//     });\n//     yield put({\n//       type: ADD_POST_TO_ME, // user 리듀서 바꾸기\n//       data: id,\n//     });\n//   } catch (err) {\n//     yield put({\n//       type: ADD_POST_FAILURE, // post 리듀서 바꾸기\n//       data: err.response.data,\n//     });\n//   }\n// }\n// 이 아래는 yield all 배열 안에 있는 fork 요청들을 한번씩 실행한다.\n// 요청 실행중 가장최근에 실행된 ADD_POST_REQUEST 요청이 되면, 위에 만든 addpost 함수를 실행한다\n// function* watchAddPost() {\n//   yield takeLatest(ADD_POST_REQUEST, addPost);\n// }\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/win7/Desktop/project/client/sagas/user.js"],"names":["logIn","logOut","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga","axios","delay","put","takeLatest","all","fork","call","useSelector","LOG_IN_FAILURE","LOG_IN_SUCCESS","LOG_IN_REQUEST","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","state","user","me","logInAPI","data","patch","action","result","type","console","log","error","response","logOutAPI","get","signUpAPI","post"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { delay, put, takeLatest, all, fork, call } from 'redux-saga/effects';\r\nimport { useSelector } from 'react-redux';\r\nimport { LOG_IN_FAILURE, LOG_IN_SUCCESS, LOG_IN_REQUEST,\r\n  LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\r\n\r\n// <- 이 부분에 리듀서에서 가져올 요청을 임포트한다.\r\n// import { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from '../reducers/post';\r\n\r\n// function signUpAPI() {\r\n// return axios.get('http://localhost:3065/user')\r\n// }\r\n\r\nconst { me } = useSelector((state) => state.user);\r\n\r\nfunction logInAPI(data) {\r\n  return axios.patch('http://localhost:3065/Login', data);\r\n}\r\nfunction* logIn(action) {\r\n  try {\r\n    const result = yield call(logInAPI, action.data);\r\n    // console.log(result);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    console.log(me);\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.get('http://localhost:3065/Logout');\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n  return axios.post('http://localhost:3065/Signup', data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpAPI, action.data);\r\n    console.log(result);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// 아래는 백엔드에서 가져올 API를 넣어준다.\r\n// function addPostAPI(data) {\r\n//   return axios.post('/api/post', data);\r\n// }\r\n\r\n// 아래 함수는 요청이 일어나면 실행될 함수를 넣어준다.\r\n// function* addPost(action) {\r\n//   try {\r\n//     // const result = yield call(addPostAPI, action.data)\r\n//     yield delay(1000);\r\n//     const id = shortId.generate();\r\n//     yield put({\r\n//       type: ADD_POST_SUCCESS, // post 리듀서 바꾸기\r\n//       data: {\r\n//         id,\r\n//         content: action.data,\r\n//       },\r\n//     });\r\n//     yield put({\r\n//       type: ADD_POST_TO_ME, // user 리듀서 바꾸기\r\n//       data: id,\r\n//     });\r\n//   } catch (err) {\r\n//     yield put({\r\n//       type: ADD_POST_FAILURE, // post 리듀서 바꾸기\r\n//       data: err.response.data,\r\n//     });\r\n//   }\r\n// }\r\n\r\n// 이 아래는 yield all 배열 안에 있는 fork 요청들을 한번씩 실행한다.\r\n// 요청 실행중 가장최근에 실행된 ADD_POST_REQUEST 요청이 되면, 위에 만든 addpost 함수를 실행한다\r\n// function* watchAddPost() {\r\n//   yield takeLatest(ADD_POST_REQUEST, addPost);\r\n// }\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}