{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas'; // // 미들웨어 thunk 3단 고차함수, 액션객체를 함수화해서 시간 지연\n// const loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\n//   console.log(action); // 액션을 실행하기전에 콘솔을 한 번 찍어주는 미들웨어\n//   return next(action);\n// };\n\nvar configure = function configure(context) {\n  console.log(context);\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware]; // 빈 배열을 그대로 넣는게 아니라 만들어 스프레드 형식으로 넣는다. ★ 중요 ★\n\n  var enhancer = true // 리덕스의 노드환경이 배포 모드일 때\n  ? compose(applyMiddleware.apply(void 0, middlewares)) // Dev툴 연결 안 한 것\n  : composeWithDevTools(applyMiddleware.apply(void 0, middlewares)); // Dev툴 연결 한 것\n\n  var store = createStore(reducer, enhancer); // enhancer를 파라미터로 받고 인핸서 기능 확장\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nvar wrapper = createWrapper(configure, {\n  debug: false\n});\nexport default wrapper;","map":null,"metadata":{},"sourceType":"module"}