{"ast":null,"code":"var _s = $RefreshSig$();\n\n// 더미데이터 넣을 때 아래 3개 주석 풀기\n// import shortId from 'shortid';\nimport produce from 'immer'; // import faker from 'faker';\n\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nexport var initialState = {\n  // 여기에 필요한 스테이트 넣기\n  logInLoading: false,\n  logInDone: false,\n  logInError: null,\n  logOutLoading: false,\n  logOutDone: false,\n  logOutError: null,\n  signUpLoading: false,\n  signUpDone: false,\n  signUpError: null,\n  me: null\n}; // 더미데이터를 무작위로 넣는다면 어래와같이 넣어준다.\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: shortId.generate(),\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n// 이 아래 3개는 사가로 익스포트하는 예제. 각각 요청, 성공, 실패의 3가지 변수를 만든다.\n\nexport var LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport var LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport var LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport var LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport var LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport var LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport var SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport var SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport var SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport var SIGN_UP_RESET = 'SIGN_UP_RESET'; // export const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\n// export const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\n// export const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n// 이 아래 예제는 사가에서 실행할 함수이다. 타입과 데이터를 합쳐서 사가에 넘겨준다.\n// export const addPost = (data) => ({\n//   type: ADD_POST_REQUEST,\n//   data,\n// });\n\nexport var loginRequestAction = function loginRequestAction(data) {\n  return {\n    type: LOG_IN_REQUEST,\n    data: data\n  };\n};\nexport var logoutRequestAction = function logoutRequestAction() {\n  return {\n    type: LOG_OUT_REQUEST\n  };\n}; // export const logoutAction = () => ({\n//   type: 'LOG_OUT_REQUEST',\n// });\n// useEffect(() => {\n//   const { me } = state.me;\n//   if (me) axios.defaults.headers.common.sessionid = me.sessionId;\n// }, [me]);\n\nexport var me = function me(_me) {\n  _s();\n\n  useEffect(function () {\n    if (_me) {\n      axios.defaults.headers.common.sessionid = _me.sessionId;\n    } else {\n      delete axios.defaults.headers.common.sessionid;\n    }\n  }, [_me]);\n};\n\n_s(me, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    // const { me } = useSelector((state) => state.user);\n    switch (action.type) {\n      // <- 이 부분에 아래와 같이 draft로 불변성 지키면서 각각의 상태를 고쳐줌\n      // case LOAD_POSTS_REQUEST:\n      //   draft.loadPostsLoading = true;\n      //   draft.loadPostsDone = false;\n      //   draft.loadPostsError = null;\n      //   break;\n      case LOG_IN_REQUEST:\n        draft.logInDone = false;\n        draft.logInError = null;\n        draft.logInLoading = true;\n        break;\n\n      case LOG_IN_SUCCESS:\n        draft.logInDone = true;\n        draft.logInError = null;\n        draft.logInLoading = false;\n        draft.me = action.data;\n        break;\n\n      case LOG_IN_FAILURE:\n        draft.logInDone = false;\n        draft.logInError = action.error;\n        draft.logInLoading = false;\n        break;\n\n      case LOG_OUT_REQUEST:\n        draft.logOutDone = false;\n        draft.logOutError = null;\n        draft.logOutLoading = true;\n        break;\n\n      case LOG_OUT_SUCCESS:\n        draft.logInDone = false;\n        draft.logOutDone = true;\n        draft.logOutError = null;\n        draft.logOutLoading = false;\n        draft.me = null;\n        break;\n\n      case LOG_OUT_FAILURE:\n        draft.logOutDone = false;\n        draft.logOutError = action.err;\n        draft.logOutLoading = false;\n        break;\n\n      case SIGN_UP_REQUEST:\n        draft.signUpDone = false;\n        draft.signUpError = null;\n        draft.signUpLoading = true;\n        break;\n\n      case SIGN_UP_SUCCESS:\n        draft.signUpDone = true;\n        draft.signUpError = null;\n        draft.signUpLoading = false;\n        break;\n\n      case SIGN_UP_FAILURE:\n        draft.signUpDone = false;\n        draft.signUpError = action.err;\n        draft.signUpLoading = false;\n        break;\n\n      case SIGN_UP_RESET:\n        draft.signUpDone = false;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/win7/Desktop/project/client/reducers/user.js"],"names":["produce","useEffect","axios","useSelector","initialState","logInLoading","logInDone","logInError","logOutLoading","logOutDone","logOutError","signUpLoading","signUpDone","signUpError","me","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_RESET","loginRequestAction","data","type","logoutRequestAction","defaults","headers","common","sessionid","sessionId","reducer","state","action","draft","error","err"],"mappings":";;AAAA;AACA;AACA,OAAOA,OAAP,MAAoB,OAApB,C,CACA;;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAO,IAAMC,YAAY,GAAG;AAC1B;AACAC,EAAAA,YAAY,EAAE,KAFY;AAG1BC,EAAAA,SAAS,EAAE,KAHe;AAI1BC,EAAAA,UAAU,EAAE,IAJc;AAK1BC,EAAAA,aAAa,EAAE,KALW;AAM1BC,EAAAA,UAAU,EAAE,KANc;AAO1BC,EAAAA,WAAW,EAAE,IAPa;AAQ1BC,EAAAA,aAAa,EAAE,KARW;AAS1BC,EAAAA,UAAU,EAAE,KATc;AAU1BC,EAAAA,WAAW,EAAE,IAVa;AAW1BC,EAAAA,EAAE,EAAE;AAXsB,CAArB,C,CAcP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB,C,CACP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD;AAAA,SAAW;AAC3CC,IAAAA,IAAI,EAAEZ,cADqC;AAE3CW,IAAAA,IAAI,EAAJA;AAF2C,GAAX;AAAA,CAA3B;AAKP,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,SAAO;AACxCD,IAAAA,IAAI,EAAET;AADkC,GAAP;AAAA,CAA5B,C,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMJ,EAAE,GAAG,YAACA,GAAD,EAAQ;AAAA;;AACxBb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIa,GAAJ,EAAQ;AAAEZ,MAAAA,KAAK,CAAC2B,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8BC,SAA9B,GAA0ClB,GAAE,CAACmB,SAA7C;AAAyD,KAAnE,MAAyE;AAAE,aAAO/B,KAAK,CAAC2B,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8BC,SAArC;AAAiD;AAC7H,GAFQ,EAEN,CAAClB,GAAD,CAFM,CAAT;AAGD,CAJM;;GAAMA,E;;AAMb,IAAMoB,OAAO,GAAG,SAAVA,OAAU;AAAA,MAACC,KAAD,uEAAS/B,YAAT;AAAA,MAAuBgC,MAAvB;AAAA,SAAkCpC,OAAO,CAACmC,KAAD,EAAQ,UAACE,KAAD,EAAW;AAC1E;AACA,YAAQD,MAAM,CAACT,IAAf;AACE;AACA;AACA;AACA;AACA;AACA;AACA,WAAKZ,cAAL;AACEsB,QAAAA,KAAK,CAAC/B,SAAN,GAAkB,KAAlB;AACA+B,QAAAA,KAAK,CAAC9B,UAAN,GAAmB,IAAnB;AACA8B,QAAAA,KAAK,CAAChC,YAAN,GAAqB,IAArB;AACA;;AACF,WAAKW,cAAL;AACEqB,QAAAA,KAAK,CAAC/B,SAAN,GAAkB,IAAlB;AACA+B,QAAAA,KAAK,CAAC9B,UAAN,GAAmB,IAAnB;AACA8B,QAAAA,KAAK,CAAChC,YAAN,GAAqB,KAArB;AACAgC,QAAAA,KAAK,CAACvB,EAAN,GAAWsB,MAAM,CAACV,IAAlB;AACA;;AACF,WAAKT,cAAL;AACEoB,QAAAA,KAAK,CAAC/B,SAAN,GAAkB,KAAlB;AACA+B,QAAAA,KAAK,CAAC9B,UAAN,GAAmB6B,MAAM,CAACE,KAA1B;AACAD,QAAAA,KAAK,CAAChC,YAAN,GAAqB,KAArB;AACA;;AACF,WAAKa,eAAL;AACEmB,QAAAA,KAAK,CAAC5B,UAAN,GAAmB,KAAnB;AACA4B,QAAAA,KAAK,CAAC3B,WAAN,GAAoB,IAApB;AACA2B,QAAAA,KAAK,CAAC7B,aAAN,GAAsB,IAAtB;AACA;;AACF,WAAKW,eAAL;AACEkB,QAAAA,KAAK,CAAC/B,SAAN,GAAkB,KAAlB;AACA+B,QAAAA,KAAK,CAAC5B,UAAN,GAAmB,IAAnB;AACA4B,QAAAA,KAAK,CAAC3B,WAAN,GAAoB,IAApB;AACA2B,QAAAA,KAAK,CAAC7B,aAAN,GAAsB,KAAtB;AACA6B,QAAAA,KAAK,CAACvB,EAAN,GAAW,IAAX;AACA;;AACF,WAAKM,eAAL;AACEiB,QAAAA,KAAK,CAAC5B,UAAN,GAAmB,KAAnB;AACA4B,QAAAA,KAAK,CAAC3B,WAAN,GAAoB0B,MAAM,CAACG,GAA3B;AACAF,QAAAA,KAAK,CAAC7B,aAAN,GAAsB,KAAtB;AACA;;AACF,WAAKa,eAAL;AACEgB,QAAAA,KAAK,CAACzB,UAAN,GAAmB,KAAnB;AACAyB,QAAAA,KAAK,CAACxB,WAAN,GAAoB,IAApB;AACAwB,QAAAA,KAAK,CAAC1B,aAAN,GAAsB,IAAtB;AACA;;AACF,WAAKW,eAAL;AACEe,QAAAA,KAAK,CAACzB,UAAN,GAAmB,IAAnB;AACAyB,QAAAA,KAAK,CAACxB,WAAN,GAAoB,IAApB;AACAwB,QAAAA,KAAK,CAAC1B,aAAN,GAAsB,KAAtB;AACA;;AACF,WAAKY,eAAL;AACEc,QAAAA,KAAK,CAACzB,UAAN,GAAmB,KAAnB;AACAyB,QAAAA,KAAK,CAACxB,WAAN,GAAoBuB,MAAM,CAACG,GAA3B;AACAF,QAAAA,KAAK,CAAC1B,aAAN,GAAsB,KAAtB;AACA;;AACF,WAAKa,aAAL;AACEa,QAAAA,KAAK,CAACzB,UAAN,GAAmB,KAAnB;AACA;;AACF;AACE;AA3DJ;AA6DD,GA/DwD,CAAzC;AAAA,CAAhB;;AAiEA,eAAesB,OAAf","sourcesContent":["// 더미데이터 넣을 때 아래 3개 주석 풀기\r\n// import shortId from 'shortid';\r\nimport produce from 'immer';\r\n// import faker from 'faker';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const initialState = {\r\n  // 여기에 필요한 스테이트 넣기\r\n  logInLoading: false,\r\n  logInDone: false,\r\n  logInError: null,\r\n  logOutLoading: false,\r\n  logOutDone: false,\r\n  logOutError: null,\r\n  signUpLoading: false,\r\n  signUpDone: false,\r\n  signUpError: null,\r\n  me: null,\r\n};\r\n\r\n// 더미데이터를 무작위로 넣는다면 어래와같이 넣어준다.\r\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n//   id: shortId.generate(),\r\n//   User: {\r\n\r\n//     id: shortId.generate(),\r\n//     nickname: faker.name.findName(),\r\n//   },\r\n//   content: faker.lorem.paragraph(),\r\n//   Images: [{\r\n//     src: faker.image.image(),\r\n//   }],\r\n//   Comments: [{\r\n//     User: {\r\n//       id: shortId.generate(),\r\n//       nickname: faker.name.findName(),\r\n//     },\r\n//     content: faker.lorem.sentence(),\r\n//   }],\r\n// }));\r\n\r\n// 이 아래 3개는 사가로 익스포트하는 예제. 각각 요청, 성공, 실패의 3가지 변수를 만든다.\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\r\nexport const SIGN_UP_RESET = 'SIGN_UP_RESET';\r\n// export const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\n// export const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\n// export const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\n// 이 아래 예제는 사가에서 실행할 함수이다. 타입과 데이터를 합쳐서 사가에 넘겨준다.\r\n// export const addPost = (data) => ({\r\n//   type: ADD_POST_REQUEST,\r\n//   data,\r\n// });\r\nexport const loginRequestAction = (data) => ({\r\n  type: LOG_IN_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const logoutRequestAction = () => ({\r\n  type: LOG_OUT_REQUEST,\r\n});\r\n\r\n// export const logoutAction = () => ({\r\n//   type: 'LOG_OUT_REQUEST',\r\n// });\r\n// useEffect(() => {\r\n//   const { me } = state.me;\r\n//   if (me) axios.defaults.headers.common.sessionid = me.sessionId;\r\n// }, [me]);\r\nexport const me = (me) => {\r\n  useEffect(() => {\r\n    if (me) { axios.defaults.headers.common.sessionid = me.sessionId; } else { delete axios.defaults.headers.common.sessionid; }\r\n  }, [me]);\r\n};\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  // const { me } = useSelector((state) => state.user);\r\n  switch (action.type) {\r\n    // <- 이 부분에 아래와 같이 draft로 불변성 지키면서 각각의 상태를 고쳐줌\r\n    // case LOAD_POSTS_REQUEST:\r\n    //   draft.loadPostsLoading = true;\r\n    //   draft.loadPostsDone = false;\r\n    //   draft.loadPostsError = null;\r\n    //   break;\r\n    case LOG_IN_REQUEST:\r\n      draft.logInDone = false;\r\n      draft.logInError = null;\r\n      draft.logInLoading = true;\r\n      break;\r\n    case LOG_IN_SUCCESS:\r\n      draft.logInDone = true;\r\n      draft.logInError = null;\r\n      draft.logInLoading = false;\r\n      draft.me = action.data;\r\n      break;\r\n    case LOG_IN_FAILURE:\r\n      draft.logInDone = false;\r\n      draft.logInError = action.error;\r\n      draft.logInLoading = false;\r\n      break;\r\n    case LOG_OUT_REQUEST:\r\n      draft.logOutDone = false;\r\n      draft.logOutError = null;\r\n      draft.logOutLoading = true;\r\n      break;\r\n    case LOG_OUT_SUCCESS:\r\n      draft.logInDone = false;\r\n      draft.logOutDone = true;\r\n      draft.logOutError = null;\r\n      draft.logOutLoading = false;\r\n      draft.me = null;\r\n      break;\r\n    case LOG_OUT_FAILURE:\r\n      draft.logOutDone = false;\r\n      draft.logOutError = action.err;\r\n      draft.logOutLoading = false;\r\n      break;\r\n    case SIGN_UP_REQUEST:\r\n      draft.signUpDone = false;\r\n      draft.signUpError = null;\r\n      draft.signUpLoading = true;\r\n      break;\r\n    case SIGN_UP_SUCCESS:\r\n      draft.signUpDone = true;\r\n      draft.signUpError = null;\r\n      draft.signUpLoading = false;\r\n      break;\r\n    case SIGN_UP_FAILURE:\r\n      draft.signUpDone = false;\r\n      draft.signUpError = action.err;\r\n      draft.signUpLoading = false;\r\n      break;\r\n    case SIGN_UP_RESET:\r\n      draft.signUpDone = false;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}