{"ast":null,"code":"// 더미데이터 넣을 때 아래 3개 주석 풀기\n// import shortId from 'shortid';\nimport produce from 'immer'; // import faker from 'faker';\n\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nexport const initialState = {\n  // 여기에 필요한 스테이트 넣기\n  mainPosts: [],\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null\n}; // 더미데이터를 무작위로 넣는다면 어래와같이 넣어준다.\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: shortId.generate(),\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n// 이 아래 3개는 사가로 익스포트하는 예제. 각각 요청, 성공, 실패의 3가지 변수를 만든다.\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_POST_RESET = 'ADD_POST_RESET';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POST_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE'; // export const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\n// export const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\n// export const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n// 이 아래 예제는 사가에서 실행할 함수이다. 타입과 데이터를 합쳐서 사가에 넘겨준다.\n// export const addPost = (data) => ({\n//   type: ADD_POST_REQUEST,\n//   data,\n// });\n// export const logoutAction = () => ({\n//   type: 'LOG_OUT_REQUEST',\n// });\n// useEffect(() => {\n//   const { me } = state.me;\n//   if (me) axios.defaults.headers.common.sessionid = me.sessionId;\n// }, [me]);\n\nexport const postRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  // const { me } = useSelector((state) => state.user);\n  switch (action.type) {\n    // <- 이 부분에 아래와 같이 draft로 불변성 지키면서 각각의 상태를 고쳐줌\n    // case LOAD_POSTS_REQUEST:\n    //   draft.loadPostsLoading = true;\n    //   draft.loadPostsDone = false;\n    //   draft.loadPostsError = null;\n    //   break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.addPostError = null;\n      draft.mainPosts.unshift(action.data);\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostDone = false;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_POST_RESET:\n      draft.addPostDone = false;\n      break;\n\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.loadPostsError = null;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/win7/Desktop/next-project/client/reducers/post.js"],"names":["produce","useEffect","axios","useSelector","initialState","mainPosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_RESET","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","postRequestAction","data","type","reducer","state","action","draft","unshift","error","concat"],"mappings":"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","sourcesContent":["// 더미데이터 넣을 때 아래 3개 주석 풀기\r\n// import shortId from 'shortid';\r\nimport produce from 'immer';\r\n// import faker from 'faker';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const initialState = {\r\n  // 여기에 필요한 스테이트 넣기\r\n  mainPosts: [],\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n};\r\n\r\n// 더미데이터를 무작위로 넣는다면 어래와같이 넣어준다.\r\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n//   id: shortId.generate(),\r\n//   User: {\r\n\r\n//     id: shortId.generate(),\r\n//     nickname: faker.name.findName(),\r\n//   },\r\n//   content: faker.lorem.paragraph(),\r\n//   Images: [{\r\n//     src: faker.image.image(),\r\n//   }],\r\n//   Comments: [{\r\n//     User: {\r\n//       id: shortId.generate(),\r\n//       nickname: faker.name.findName(),\r\n//     },\r\n//     content: faker.lorem.sentence(),\r\n//   }],\r\n// }));\r\n\r\n// 이 아래 3개는 사가로 익스포트하는 예제. 각각 요청, 성공, 실패의 3가지 변수를 만든다.\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\nexport const ADD_POST_RESET = 'ADD_POST_RESET';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\n// export const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\n// export const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\n// export const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\n// 이 아래 예제는 사가에서 실행할 함수이다. 타입과 데이터를 합쳐서 사가에 넘겨준다.\r\n// export const addPost = (data) => ({\r\n//   type: ADD_POST_REQUEST,\r\n//   data,\r\n// });\r\n\r\n// export const logoutAction = () => ({\r\n//   type: 'LOG_OUT_REQUEST',\r\n// });\r\n// useEffect(() => {\r\n//   const { me } = state.me;\r\n//   if (me) axios.defaults.headers.common.sessionid = me.sessionId;\r\n// }, [me]);\r\n\r\nexport const postRequestAction = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  // const { me } = useSelector((state) => state.user);\r\n  switch (action.type) {\r\n    // <- 이 부분에 아래와 같이 draft로 불변성 지키면서 각각의 상태를 고쳐줌\r\n    // case LOAD_POSTS_REQUEST:\r\n    //   draft.loadPostsLoading = true;\r\n    //   draft.loadPostsDone = false;\r\n    //   draft.loadPostsError = null;\r\n    //   break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.addPostError = null;\r\n      draft.mainPosts.unshift(action.data);\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case ADD_POST_RESET:\r\n      draft.addPostDone = false;\r\n      break;\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.loadPostsError = null;\r\n      draft.mainPosts = draft.mainPosts.concat(action.data);\r\n      break;\r\n    case LOAD_POSTS_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}