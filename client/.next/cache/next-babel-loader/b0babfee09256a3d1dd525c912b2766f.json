{"ast":null,"code":"import axios from 'axios';\nimport { delay, put, takeLatest, all, fork, call } from 'redux-saga/effects';\nimport { useSelector } from 'react-redux';\nimport { LOG_IN_FAILURE, LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_FAILURE, LOAD_MY_INFO_SUCCESS } from '../reducers/user'; // <- 이 부분에 리듀서에서 가져올 요청을 임포트한다.\n// import { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from '../reducers/post';\n// function signUpAPI() {\n// return axios.get('http://localhost:3065/user')\n// }\n\nfunction loadUserAPI() {\n  // const { me } = useSelector((state) => state.user);\n  // if (me) { console.log(me); }\n  return axios.get('http://localhost:3065/'); // get이랑 delete는 데이터가 없으므로 2번째 자리에 옵션이 들어가는데\n  // saga index에서 credentials 공통 처리를 해주었으므로 생략한다.\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data); // console.log(result);\n\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  // const { me } = useSelector((state) => state.user);\n  // if (me) { console.log(me); }\n  return axios.post('http://localhost:3065/Login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data); // console.log(result);\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('http://localhost:3065/Logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('http://localhost:3065/Signup', data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data.message\n    });\n  }\n} // 아래는 백엔드에서 가져올 API를 넣어준다.\n// function addPostAPI(data) {\n//   return axios.post('/api/post', data);\n// }\n// 아래 함수는 요청이 일어나면 실행될 함수를 넣어준다.\n// function* addPost(action) {\n//   try {\n//     // const result = yield call(addPostAPI, action.data)\n//     yield delay(1000);\n//     const id = shortId.generate();\n//     yield put({\n//       type: ADD_POST_SUCCESS, // post 리듀서 바꾸기\n//       data: {\n//         id,\n//         content: action.data,\n//       },\n//     });\n//     yield put({\n//       type: ADD_POST_TO_ME, // user 리듀서 바꾸기\n//       data: id,\n//     });\n//   } catch (err) {\n//     yield put({\n//       type: ADD_POST_FAILURE, // post 리듀서 바꾸기\n//       data: err.response.data,\n//     });\n//   }\n// }\n// 이 아래는 yield all 배열 안에 있는 fork 요청들을 한번씩 실행한다.\n// 요청 실행중 가장최근에 실행된 ADD_POST_REQUEST 요청이 되면, 위에 만든 addpost 함수를 실행한다\n// function* watchAddPost() {\n//   yield takeLatest(ADD_POST_REQUEST, addPost);\n// }\n\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadUser);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadUser), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/win7/Desktop/project/client/sagas/user.js"],"names":["axios","delay","put","takeLatest","all","fork","call","useSelector","LOG_IN_FAILURE","LOG_IN_SUCCESS","LOG_IN_REQUEST","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_FAILURE","LOAD_MY_INFO_SUCCESS","loadUserAPI","get","loadUser","action","result","data","type","err","console","error","response","logInAPI","post","logIn","logOutAPI","logOut","signUpAPI","signUp","log","message","watchLoadUser","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { delay, put, takeLatest, all, fork, call } from 'redux-saga/effects';\r\nimport { useSelector } from 'react-redux';\r\nimport { LOG_IN_FAILURE, LOG_IN_SUCCESS, LOG_IN_REQUEST,\r\n  LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\r\n  LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_FAILURE, LOAD_MY_INFO_SUCCESS } from '../reducers/user';\r\n\r\n// <- 이 부분에 리듀서에서 가져올 요청을 임포트한다.\r\n// import { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from '../reducers/post';\r\n\r\n// function signUpAPI() {\r\n// return axios.get('http://localhost:3065/user')\r\n// }\r\n\r\nfunction loadUserAPI() {\r\n  // const { me } = useSelector((state) => state.user);\r\n  // if (me) { console.log(me); }\r\n  return axios.get('http://localhost:3065/');\r\n  // get이랑 delete는 데이터가 없으므로 2번째 자리에 옵션이 들어가는데\r\n  // saga index에서 credentials 공통 처리를 해주었으므로 생략한다.\r\n}\r\nfunction* loadUser(action) {\r\n  try {\r\n    const result = yield call(loadUserAPI, action.data);\r\n    // console.log(result);\r\n    yield put({\r\n      type: LOAD_MY_INFO_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_MY_INFO_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logInAPI(data) {\r\n  // const { me } = useSelector((state) => state.user);\r\n  // if (me) { console.log(me); }\r\n  return axios.post('http://localhost:3065/Login', data);\r\n}\r\nfunction* logIn(action) {\r\n  try {\r\n    const result = yield call(logInAPI, action.data);\r\n    // console.log(result);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post('http://localhost:3065/Logout');\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n  return axios.post('http://localhost:3065/Signup', data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpAPI, action.data);\r\n    console.log(result);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data.message,\r\n    });\r\n  }\r\n}\r\n\r\n// 아래는 백엔드에서 가져올 API를 넣어준다.\r\n// function addPostAPI(data) {\r\n//   return axios.post('/api/post', data);\r\n// }\r\n\r\n// 아래 함수는 요청이 일어나면 실행될 함수를 넣어준다.\r\n// function* addPost(action) {\r\n//   try {\r\n//     // const result = yield call(addPostAPI, action.data)\r\n//     yield delay(1000);\r\n//     const id = shortId.generate();\r\n//     yield put({\r\n//       type: ADD_POST_SUCCESS, // post 리듀서 바꾸기\r\n//       data: {\r\n//         id,\r\n//         content: action.data,\r\n//       },\r\n//     });\r\n//     yield put({\r\n//       type: ADD_POST_TO_ME, // user 리듀서 바꾸기\r\n//       data: id,\r\n//     });\r\n//   } catch (err) {\r\n//     yield put({\r\n//       type: ADD_POST_FAILURE, // post 리듀서 바꾸기\r\n//       data: err.response.data,\r\n//     });\r\n//   }\r\n// }\r\n\r\n// 이 아래는 yield all 배열 안에 있는 fork 요청들을 한번씩 실행한다.\r\n// 요청 실행중 가장최근에 실행된 ADD_POST_REQUEST 요청이 되면, 위에 만든 addpost 함수를 실행한다\r\n// function* watchAddPost() {\r\n//   yield takeLatest(ADD_POST_REQUEST, addPost);\r\n// }\r\nfunction* watchLoadUser() {\r\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadUser);\r\n}\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLoadUser),\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}