{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post'; // <- 여기에 연결할 리듀서 임포트 해오기\n// (이전상태, 액션) => 다음상태\n\nconst rootReducer = combineReducers({\n  // 서버사이드 랜더링을 위해 HYDRATE를 인덱스에 추가해줌\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post // post, // post 리듀서 가져와서 넣은 것\n  // 이 부분에 임포트한 리듀서 넣기\n\n});\nexport default rootReducer; // import { HYDRATE } from 'next-redux-wrapper';\n// import { combineReducers } from 'redux';\n// import user from './user';\n// // (이전상태, 액션) => 다음상태\n// const rootReducer = (state, action) => {\n//   switch (action.type) {\n//     case HYDRATE:\n//       console.log('HYDRATE', action);\n//       return action.payload;\n//     default: {\n//       const combinedReducer = combineReducers({\n//         user,\n//       });\n//       return combinedReducer(state, action);\n//     }\n//   }\n// };\n// export default rootReducer;","map":null,"metadata":{},"sourceType":"module"}