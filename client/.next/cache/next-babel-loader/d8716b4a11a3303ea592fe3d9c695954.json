{"ast":null,"code":"import axios from 'axios';\nimport { delay, put, takeLatest, all, fork, call } from 'redux-saga/effects';\nimport { useSelector } from 'react-redux';\nimport { LOG_IN_FAILURE, LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_FAILURE, LOAD_MY_INFO_SUCCESS } from '../reducers/user'; // <- 이 부분에 리듀서에서 가져올 요청을 임포트한다.\n// import { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from '../reducers/post';\n// function signUpAPI() {\n// return axios.get('http://localhost:3065/user')\n// }\n\nfunction loadUserAPI() {\n  // const { me } = useSelector((state) => state.user);\n  // if (me) { console.log(me); }\n  return axios.get('http://localhost:3065/'); // get이랑 delete는 데이터가 없으므로 2번째 자리에 옵션이 들어가는데\n  // saga index에서 credentials 공통 처리를 해주었으므로 생략한다.\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data); // console.log(result);\n\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  // const { me } = useSelector((state) => state.user);\n  // if (me) { console.log(me); }\n  return axios.post('http://localhost:3065/Login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data); // console.log(result);\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('http://localhost:3065/Logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('http://localhost:3065/Signup', data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n} // 아래는 백엔드에서 가져올 API를 넣어준다.\n// function addPostAPI(data) {\n//   return axios.post('/api/post', data);\n// }\n// 아래 함수는 요청이 일어나면 실행될 함수를 넣어준다.\n// function* addPost(action) {\n//   try {\n//     // const result = yield call(addPostAPI, action.data)\n//     yield delay(1000);\n//     const id = shortId.generate();\n//     yield put({\n//       type: ADD_POST_SUCCESS, // post 리듀서 바꾸기\n//       data: {\n//         id,\n//         content: action.data,\n//       },\n//     });\n//     yield put({\n//       type: ADD_POST_TO_ME, // user 리듀서 바꾸기\n//       data: id,\n//     });\n//   } catch (err) {\n//     yield put({\n//       type: ADD_POST_FAILURE, // post 리듀서 바꾸기\n//       data: err.response.data,\n//     });\n//   }\n// }\n// 이 아래는 yield all 배열 안에 있는 fork 요청들을 한번씩 실행한다.\n// 요청 실행중 가장최근에 실행된 ADD_POST_REQUEST 요청이 되면, 위에 만든 addpost 함수를 실행한다\n// function* watchAddPost() {\n//   yield takeLatest(ADD_POST_REQUEST, addPost);\n// }\n\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadUser);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadUser), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":null,"metadata":{},"sourceType":"module"}