{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas'; // // 미들웨어 thunk 3단 고차함수, 액션객체를 함수화해서 시간 지연\n// const loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\n//   console.log(action); // 액션을 실행하기전에 콘솔을 한 번 찍어주는 미들웨어\n//   return next(action);\n// };\n\nconst configure = context => {\n  console.log(context);\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware]; // 빈 배열을 그대로 넣는게 아니라 만들어 스프레드 형식으로 넣는다. ★ 중요 ★\n\n  const enhancer = false // 리덕스의 노드환경이 배포 모드일 때\n  ? compose(applyMiddleware(...middlewares)) // Dev툴 연결 안 한 것\n  : composeWithDevTools(applyMiddleware(...middlewares)); // Dev툴 연결 한 것\n\n  const store = createStore(reducer, enhancer); // enhancer를 파라미터로 받고 인핸서 기능 확장\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configure, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/win7/Desktop/next-project/client/configure/configure.js"],"names":["createWrapper","createStore","compose","applyMiddleware","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","configure","context","console","log","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAIC,OAAD,IAAa;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,QAAMG,cAAc,GAAGP,oBAAoB,EAA3C;AACA,QAAMQ,WAAW,GAAG,CAACD,cAAD,CAApB,CAH6B,CAI7B;;AACA,QAAME,QAAQ,GAAG,MACjB;AADiB,IAEbZ,OAAO,CAACC,eAAe,CAAC,GAAGU,WAAJ,CAAhB,CAFM,CAE4B;AAF5B,IAGbT,mBAAmB,CAACD,eAAe,CAAC,GAAGU,WAAJ,CAAhB,CAHvB,CAL6B,CAQ6B;;AAC1D,QAAME,KAAK,GAAGd,WAAW,CAACK,OAAD,EAAUQ,QAAV,CAAzB,CAT6B,CAU7B;;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBV,QAAnB,CAAjB;AACA,SAAOQ,KAAP;AACD,CAbD;;AAeA,MAAMG,OAAO,GAAGlB,aAAa,CAACQ,SAAD,EAAY;AACvCW,EAAAA,KAAK;AADkC,CAAZ,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\n// // 미들웨어 thunk 3단 고차함수, 액션객체를 함수화해서 시간 지연\r\n// const loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n//   console.log(action); // 액션을 실행하기전에 콘솔을 한 번 찍어주는 미들웨어\r\n//   return next(action);\r\n// };\r\n\r\nconst configure = (context) => {\r\n  console.log(context);\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware];\r\n  // 빈 배열을 그대로 넣는게 아니라 만들어 스프레드 형식으로 넣는다. ★ 중요 ★\r\n  const enhancer = process.env.NODE_ENV === 'production'\r\n  // 리덕스의 노드환경이 배포 모드일 때\r\n    ? compose(applyMiddleware(...middlewares)) // Dev툴 연결 안 한 것\r\n    : composeWithDevTools(applyMiddleware(...middlewares)); // Dev툴 연결 한 것\r\n  const store = createStore(reducer, enhancer);\r\n  // enhancer를 파라미터로 받고 인핸서 기능 확장\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configure, {\r\n  debug: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}