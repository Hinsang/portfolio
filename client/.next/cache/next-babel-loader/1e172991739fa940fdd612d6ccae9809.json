{"ast":null,"code":"// 더미데이터 넣을 때 아래 3개 주석 풀기\n// import shortId from 'shortid';\nimport produce from 'immer'; // import faker from 'faker';\n\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nexport var initialState = {\n  // 여기에 필요한 스테이트 넣기\n  mainPosts: [],\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null\n}; // 더미데이터를 무작위로 넣는다면 어래와같이 넣어준다.\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: shortId.generate(),\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n// 이 아래 3개는 사가로 익스포트하는 예제. 각각 요청, 성공, 실패의 3가지 변수를 만든다.\n\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var ADD_POST_RESET = 'ADD_POST_RESET';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POST_FAILURE';\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE'; // export const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\n// export const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\n// export const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n// 이 아래 예제는 사가에서 실행할 함수이다. 타입과 데이터를 합쳐서 사가에 넘겨준다.\n// export const addPost = (data) => ({\n//   type: ADD_POST_REQUEST,\n//   data,\n// });\n// export const logoutAction = () => ({\n//   type: 'LOG_OUT_REQUEST',\n// });\n// useEffect(() => {\n//   const { me } = state.me;\n//   if (me) axios.defaults.headers.common.sessionid = me.sessionId;\n// }, [me]);\n\nexport var postRequestAction = function postRequestAction(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    // const { me } = useSelector((state) => state.user);\n    switch (action.type) {\n      // <- 이 부분에 아래와 같이 draft로 불변성 지키면서 각각의 상태를 고쳐줌\n      // case LOAD_POSTS_REQUEST:\n      //   draft.loadPostsLoading = true;\n      //   draft.loadPostsDone = false;\n      //   draft.loadPostsError = null;\n      //   break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.addPostError = null;\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostDone = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_POST_RESET:\n        draft.addPostDone = false;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.loadPostsError = null;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":null,"metadata":{},"sourceType":"module"}