{"ast":null,"code":"// 더미데이터 넣을 때 아래 3개 주석 풀기\n// import shortId from 'shortid';\nimport produce from 'immer'; // import faker from 'faker';\n\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nexport var initialState = {\n  // 여기에 필요한 스테이트 넣기\n  loadUserLoading: false,\n  loadUserDone: false,\n  loadUserError: null,\n  logInLoading: false,\n  logInDone: false,\n  logInError: null,\n  logOutLoading: false,\n  logOutDone: false,\n  logOutError: null,\n  signUpLoading: false,\n  signUpDone: false,\n  signUpError: null,\n  me: null\n}; // 더미데이터를 무작위로 넣는다면 어래와같이 넣어준다.\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: shortId.generate(),\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n// 이 아래 3개는 사가로 익스포트하는 예제. 각각 요청, 성공, 실패의 3가지 변수를 만든다.\n\nexport var LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport var LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport var LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport var LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport var LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport var LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport var SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport var SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport var SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport var SIGN_UP_RESET = 'SIGN_UP_RESET';\nexport var LOAD_MY_INFO_REQUEST = 'LOAD_MY_INFO_REQUEST';\nexport var LOAD_MY_INFO_SUCCESS = 'LOAD_MY_INFO_SUCCESS';\nexport var LOAD_MY_INFO_FAILURE = 'LOAD_MY_INFO_FAILURE';\nexport var ADD_POST_TO_ME = 'ADD_POST_TO_ME'; // 새로고침때마다 로그인 정보 넣어주기\n// export const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\n// export const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\n// export const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n// 이 아래 예제는 사가에서 실행할 함수이다. 타입과 데이터를 합쳐서 사가에 넘겨준다.\n// export const addPost = (data) => ({\n//   type: ADD_POST_REQUEST,\n//   data,\n// });\n\nexport var logoutRequestAction = function logoutRequestAction() {\n  return {\n    type: LOG_OUT_REQUEST\n  };\n}; // export const logoutAction = () => ({\n//   type: 'LOG_OUT_REQUEST',\n// });\n// useEffect(() => {\n//   const { me } = state.me;\n//   if (me) axios.defaults.headers.common.sessionid = me.sessionId;\n// }, [me]);\n\nexport var loginRequestAction = function loginRequestAction(data) {\n  return {\n    type: LOG_IN_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    // const { me } = useSelector((state) => state.user);\n    switch (action.type) {\n      // <- 이 부분에 아래와 같이 draft로 불변성 지키면서 각각의 상태를 고쳐줌\n      case LOAD_MY_INFO_REQUEST:\n        draft.loadUserDone = false;\n        draft.loadUserError = null;\n        draft.loadUserLoading = true;\n        break;\n\n      case LOAD_MY_INFO_SUCCESS:\n        draft.loadUserDone = true;\n        draft.loadUserError = null;\n        draft.loadUserLoading = false;\n        draft.me = action.data;\n        break;\n\n      case LOAD_MY_INFO_FAILURE:\n        draft.loadUserDone = false;\n        draft.loadUserError = action.error;\n        draft.loadUserLoading = false;\n        break;\n\n      case LOG_IN_REQUEST:\n        draft.logInDone = false;\n        draft.logInError = null;\n        draft.logInLoading = true;\n        break;\n\n      case LOG_IN_SUCCESS:\n        draft.logInDone = true;\n        draft.logInError = null;\n        draft.logInLoading = false;\n        draft.me = action.data;\n        break;\n\n      case LOG_IN_FAILURE:\n        draft.logInDone = false;\n        draft.logInError = action.error;\n        draft.logInLoading = false;\n        break;\n\n      case LOG_OUT_REQUEST:\n        draft.logOutDone = false;\n        draft.logOutError = null;\n        draft.logOutLoading = true;\n        break;\n\n      case LOG_OUT_SUCCESS:\n        draft.logInDone = false;\n        draft.logOutDone = true;\n        draft.logOutError = null;\n        draft.logOutLoading = false;\n        draft.me = null;\n        break;\n\n      case LOG_OUT_FAILURE:\n        draft.logOutDone = false;\n        draft.logOutError = action.err;\n        draft.logOutLoading = false;\n        break;\n\n      case SIGN_UP_REQUEST:\n        draft.signUpDone = false;\n        draft.signUpError = null;\n        draft.signUpLoading = true;\n        draft.logInError = null;\n        break;\n\n      case SIGN_UP_SUCCESS:\n        draft.signUpDone = true;\n        draft.signUpError = null;\n        draft.signUpLoading = false;\n        break;\n\n      case SIGN_UP_FAILURE:\n        draft.signUpDone = false;\n        draft.signUpError = action.err;\n        draft.signUpLoading = false;\n        break;\n\n      case SIGN_UP_RESET:\n        draft.signUpDone = false;\n        draft.logInError = null;\n        break;\n\n      case ADD_POST_TO_ME:\n        draft.me.Posts.unshift({\n          id: action.data\n        });\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":null,"metadata":{},"sourceType":"module"}