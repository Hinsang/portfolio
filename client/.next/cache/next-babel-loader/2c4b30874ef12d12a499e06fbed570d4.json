{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user'; // (이전상태, 액션) => 다음상태\n\nconst rootReducer = (state, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n    // return action.payload;\n\n    default:\n      {\n        const combinedReducer = combineReducers({\n          user\n        });\n        return combinedReducer(state, action);\n      }\n  }\n};\n\nexport default rootReducer; // import { HYDRATE } from 'next-redux-wrapper';\n// import { combineReducers } from 'redux';\n// import user from './user';\n// // import post from './post';\n// // <- 여기에 연결할 리듀서 임포트 해오기\n// // (이전상태, 액션) => 다음상태\n// const rootReducer = combineReducers({\n//   // 서버사이드 랜더링을 위해 HYDRATE를 인덱스에 추가해줌\n//   index: (state = {}, action) => {\n//     switch (action.type) {\n//       case HYDRATE:\n//         console.log('HYDRATE', action);\n//         return { ...state, ...action.payload };\n//       default:\n//         return state;\n//     }\n//   },\n//   user,\n//   // post, // post 리듀서 가져와서 넣은 것\n//   // 이 부분에 임포트한 리듀서 넣기\n// });\n// export default rootReducer;","map":{"version":3,"sources":["C:/Users/win7/Desktop/project/client/reducers/index.js"],"names":["HYDRATE","combineReducers","user","rootReducer","state","action","type","console","log","payload","combinedReducer"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,OAAL;AACEO,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,6CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;AACA;;AACF;AAAS;AACP,cAAMC,eAAe,GAAGT,eAAe,CAAC;AACtCC,UAAAA;AADsC,SAAD,CAAvC;AAGA,eAAOQ,eAAe,CAACN,KAAD,EAAQC,MAAR,CAAtB;AACD;AAVH;AAYD,CAbD;;AAeA,eAAeF,WAAf,C,CAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\nimport { combineReducers } from 'redux';\r\n\r\nimport user from './user';\r\n\r\n// (이전상태, 액션) => 다음상태\r\nconst rootReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case HYDRATE:\r\n      console.log('HYDRATE', action);\r\n      return { ...state, ...action.payload };\r\n      // return action.payload;\r\n    default: {\r\n      const combinedReducer = combineReducers({\r\n        user,\r\n      });\r\n      return combinedReducer(state, action);\r\n    }\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n\r\n// import { HYDRATE } from 'next-redux-wrapper';\r\n// import { combineReducers } from 'redux';\r\n\r\n// import user from './user';\r\n// // import post from './post';\r\n// // <- 여기에 연결할 리듀서 임포트 해오기\r\n\r\n// // (이전상태, 액션) => 다음상태\r\n// const rootReducer = combineReducers({\r\n//   // 서버사이드 랜더링을 위해 HYDRATE를 인덱스에 추가해줌\r\n//   index: (state = {}, action) => {\r\n//     switch (action.type) {\r\n//       case HYDRATE:\r\n//         console.log('HYDRATE', action);\r\n//         return { ...state, ...action.payload };\r\n//       default:\r\n//         return state;\r\n//     }\r\n//   },\r\n//   user,\r\n//   // post, // post 리듀서 가져와서 넣은 것\r\n//   // 이 부분에 임포트한 리듀서 넣기\r\n// });\r\n\r\n// export default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}